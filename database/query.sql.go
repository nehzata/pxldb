// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const dbsDelete = `-- name: DbsDelete :exec
UPDATE dbs
SET delete_ts = UNIXEPOCH()
WHERE id = ?1
`

func (q *Queries) DbsDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, dbsDelete, id)
	return err
}

const dbsGet = `-- name: DbsGet :many
SELECT id, dsn, name, is_expanded
FROM dbs
WHERE delete_ts IS NULL
`

type DbsGetRow struct {
	ID         int64
	Dsn        string
	Name       string
	IsExpanded bool
}

func (q *Queries) DbsGet(ctx context.Context) ([]DbsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, dbsGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DbsGetRow
	for rows.Next() {
		var i DbsGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Dsn,
			&i.Name,
			&i.IsExpanded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dbsInsert = `-- name: DbsInsert :one
INSERT INTO dbs (dsn, name)
VALUES (?1, ?2)
RETURNING id
`

type DbsInsertParams struct {
	Dsn  string
	Name string
}

func (q *Queries) DbsInsert(ctx context.Context, arg DbsInsertParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, dbsInsert, arg.Dsn, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const dbsSetIsExpanded = `-- name: DbsSetIsExpanded :exec
UPDATE dbs
SET is_expanded = ?1
WHERE id = ?2
`

type DbsSetIsExpandedParams struct {
	IsExpanded bool
	ID         int64
}

func (q *Queries) DbsSetIsExpanded(ctx context.Context, arg DbsSetIsExpandedParams) error {
	_, err := q.db.ExecContext(ctx, dbsSetIsExpanded, arg.IsExpanded, arg.ID)
	return err
}

const dbsUpdate = `-- name: DbsUpdate :exec
UPDATE dbs
SET dsn = ?1, name = ?2
WHERE id = ?3
`

type DbsUpdateParams struct {
	Dsn  string
	Name string
	ID   int64
}

func (q *Queries) DbsUpdate(ctx context.Context, arg DbsUpdateParams) error {
	_, err := q.db.ExecContext(ctx, dbsUpdate, arg.Dsn, arg.Name, arg.ID)
	return err
}

const kvStoreGet = `-- name: KvStoreGet :one
SELECT v
FROM kvstore
WHERE k = ?1
`

func (q *Queries) KvStoreGet(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRowContext(ctx, kvStoreGet, key)
	var v string
	err := row.Scan(&v)
	return v, err
}

const kvStoreSet = `-- name: KvStoreSet :exec
INSERT INTO kvstore (k, v)
VALUES (?1, ?2)
ON CONFLICT (k)
DO UPDATE
  SET v = EXCLUDED.v
`

type KvStoreSetParams struct {
	Key string
	Val string
}

func (q *Queries) KvStoreSet(ctx context.Context, arg KvStoreSetParams) error {
	_, err := q.db.ExecContext(ctx, kvStoreSet, arg.Key, arg.Val)
	return err
}

const sessionQueriesDelete = `-- name: SessionQueriesDelete :exec
UPDATE session_queries
SET delete_ts = UNIXEPOCH()
WHERE id = ?1
`

func (q *Queries) SessionQueriesDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, sessionQueriesDelete, id)
	return err
}

const sessionQueriesGet = `-- name: SessionQueriesGet :many
SELECT id, qry, res
FROM session_queries
WHERE
  session_id = ?1 AND
  delete_ts IS NULL
ORDER BY create_ts
`

type SessionQueriesGetRow struct {
	ID  int64
	Qry string
	Res sql.NullString
}

func (q *Queries) SessionQueriesGet(ctx context.Context, sID string) ([]SessionQueriesGetRow, error) {
	rows, err := q.db.QueryContext(ctx, sessionQueriesGet, sID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionQueriesGetRow
	for rows.Next() {
		var i SessionQueriesGetRow
		if err := rows.Scan(&i.ID, &i.Qry, &i.Res); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionQueriesInsert = `-- name: SessionQueriesInsert :one
INSERT INTO session_queries (session_id, qry, res)
VALUES (?1, ?2, ?3)
RETURNING id
`

type SessionQueriesInsertParams struct {
	SID string
	Qry string
	Res sql.NullString
}

func (q *Queries) SessionQueriesInsert(ctx context.Context, arg SessionQueriesInsertParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, sessionQueriesInsert, arg.SID, arg.Qry, arg.Res)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const sessionQueriesUpdate = `-- name: SessionQueriesUpdate :exec
UPDATE session_queries
SET qry = ?1, res = ?2
WHERE id = ?3
`

type SessionQueriesUpdateParams struct {
	Qry string
	Res sql.NullString
	ID  int64
}

func (q *Queries) SessionQueriesUpdate(ctx context.Context, arg SessionQueriesUpdateParams) error {
	_, err := q.db.ExecContext(ctx, sessionQueriesUpdate, arg.Qry, arg.Res, arg.ID)
	return err
}

const sessionsDelete = `-- name: SessionsDelete :exec
UPDATE sessions
SET delete_ts = UNIXEPOCH()
WHERE id = ?1
`

func (q *Queries) SessionsDelete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, sessionsDelete, id)
	return err
}

const sessionsGet = `-- name: SessionsGet :many
SELECT id, db_id, title
FROM sessions
WHERE delete_ts IS NULL
`

type SessionsGetRow struct {
	ID    string
	DbID  int64
	Title sql.NullString
}

func (q *Queries) SessionsGet(ctx context.Context) ([]SessionsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, sessionsGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionsGetRow
	for rows.Next() {
		var i SessionsGetRow
		if err := rows.Scan(&i.ID, &i.DbID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sessionsInsert = `-- name: SessionsInsert :one
INSERT INTO sessions (id, db_id)
VALUES (?1, ?2)
RETURNING id
`

type SessionsInsertParams struct {
	ID   string
	DbID int64
}

func (q *Queries) SessionsInsert(ctx context.Context, arg SessionsInsertParams) (string, error) {
	row := q.db.QueryRowContext(ctx, sessionsInsert, arg.ID, arg.DbID)
	var id string
	err := row.Scan(&id)
	return id, err
}
